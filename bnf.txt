
Grammar G (V, T, P, S)
V(non-terminals) = {<stmt>, <assignment_stmt>, <if_stmt>, <for_stmt>, <while_stmt>, <decl_stmt>, ... }
T(terminals) = {";", "int", "float", "char",  "," , "(", ")", "if", "else",  ... }
P(productions) = { "<ident_list> ::= <ident> | <ident> , <ident_list>", ... }
S start variable, S is a member of V, <program>

//Regular Expression for Lexemes:

<char> : a | b | c | d ... | A | B | C ... | _ | $

<digit>: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<sign>: + | -

<ident> : <char> | <ident> <char> | <ident> <digit>

<func_ident> : <char> | <ident> <char> | <ident> <digit>

<int_const>: <sign> <digit> | <int_const> <digit>

<ident_list> : <ident> | <ident> , <ident_list>

<true> : true

<false> : false

//end of lexemes

// program start

<program> ::= MAIN LPAR RPAR LBRACKET <stmt_list> RBRACKET

<stmt_list> ::= <stmt>
              | <stmt_list> <stmt>

<stmt> ::= <assignment_stmt> SEMICOLON
         | <if_stmt> SEMICOLON
         | <while_stmt> SEMICOLON
         | <for_stmt> SEMICOLON
         | <func_call> SEMICOLON
         | <decl_stmt> SEMICOLON
         | <func_def_stmt> SEMICOLON
         | <input_stmt> SEMICOLON
         | <output_stmt> SEMICOLON
         | <comment_sentence>

<comment_sentence> ::= # <sentence> #

<sentence> ::= IDENTIFIER_S sentence
         | IDENTIFIER_S

// from slides
<if_stmt> ::= <matched_if> | <unmatched_if>

<matched_if> ::= IF <logic_exp> ELSE_IF <matched_if> else <matched_if>
              | <stmt>

<unmatched_if> ::= IF <logic_exp> ELSE_IF <stmt>
                | IF <logic_exp> ELSE_IF <matched_if> ELSE <unmatched_if>

// slides ends

<for_stmt> ::= FOR LPAR <expr>; <expr>; <expr> RPAR <stmt_list>

<while_stmt> ::= WHILE LPAR <expr>|<logic_exp>|<func_call>|<primitive_func> RPAR <stmt_list>

# eklenmesi istenen şeyler var
<func_call> ::= <ident> LPAR <args> RPAR

<args> ::= <type_ident> <ident>
        | <type_ident> <ident>, <args>
        | ""

<input_stmt> ::= INPUT LPAR <ident> RPAR

<output_stmt> ::= OUTPUT LPAR STRING|<ident>|<func_call>|<primitive_func> RPAR # ******** burayı da kontrol et ********

<type_ident> ::= INT_TYPE
               | FLOAT_TYPE
               | CHAR_TYPE
               | VOID

<ident_list> ::= <ident>
               | <ident_list> COMMA <ident>


<decl_stmt> ::= <type_ident> <ident_list>

<func_def_stmt> ::= <type_ident> <func_call> <stmt_list>

<primitive_func> ::= <ident> DOT READINC SEMICOLON
                  |  <ident> DOT READALT SEMICOLON
                  |  <ident> DOT READTEMP SEMICOLON
                  |  <ident> DOT READACCEL SEMICOLON
                  |  <ident> DOT TOGGLECAMERA SEMICOLON
                  |  <ident> DOT TAKEPIC SEMICOLON
                  |  <ident> DOT READTS SEMICOLON
                  |  <ident> DOT CONNECT SEMICOLON


<assignment_stmt> ::= <ident_list> = <expr>
                    | <ident_list> = <func_call>
                    | <ident_list> = <primitive_func>


<logic_exp> ::=
                    INTEGER LESS INTEGER
                    | INTEGER GREATER INTEGER
                    | INTEGER LTE INTEGER
                    | INTEGER GTE INTEGER
                    | IDENTIFIER LESS IDENTIFIER
                    | IDENTIFIER GREATER IDENTIFIER
                    | IDENTIFIER LTE IDENTIFIER
                    | IDENTIFIER GTE IDENTIFIER
                    | IDENTIFIER AND IDENTIFIER
                    | IDENTIFIER OR IDENTIFIER
                    | BOOLEAN AND BOOLEAN
                    | BOOLEAN OR BOOLEAN
                    | BOOLEAN IS_EQUAL BOOLEAN
                    | BOOLEAN NOT_EQUAL BOOLEAN
                    | IDENTIFIER IS_EQUAL IDENTIFIER
                    | IDENTIFIER NOT_EQUAL IDENTIFIER

<expr> ::= <expr> PLUS <term>
        | <expr> MINUS <term>
        | <term>

<term> ::= <term> MULT <term>
        | <term> DIV <factor>
        | <factor>

<factor> ::= <idc> EXPONENT <factor>
          |  <idc>

<idc> ::= <ident> # *****************KONTROL ET***
        //| <int_const>
        | LPAR <expr> RPAR

// program end
